// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$account-name: 'account';
$account-x: 0px;
$account-y: 0px;
$account-offset-x: 0px;
$account-offset-y: 0px;
$account-width: 18px;
$account-height: 18px;
$account-total-width: 36px;
$account-total-height: 36px;
$account-image: '../css/sprite.png';
$account: (0px, 0px, 0px, 0px, 18px, 18px, 36px, 36px, '../css/sprite.png', 'account', );
$check-circle-name: 'check_circle';
$check-circle-x: 18px;
$check-circle-y: 0px;
$check-circle-offset-x: -18px;
$check-circle-offset-y: 0px;
$check-circle-width: 18px;
$check-circle-height: 18px;
$check-circle-total-width: 36px;
$check-circle-total-height: 36px;
$check-circle-image: '../css/sprite.png';
$check-circle: (18px, 0px, -18px, 0px, 18px, 18px, 36px, 36px, '../css/sprite.png', 'check_circle', );
$delete-name: 'delete';
$delete-x: 0px;
$delete-y: 18px;
$delete-offset-x: 0px;
$delete-offset-y: -18px;
$delete-width: 18px;
$delete-height: 18px;
$delete-total-width: 36px;
$delete-total-height: 36px;
$delete-image: '../css/sprite.png';
$delete: (0px, 18px, 0px, -18px, 18px, 18px, 36px, 36px, '../css/sprite.png', 'delete', );
$spritesheet-width: 36px;
$spritesheet-height: 36px;
$spritesheet-image: '../css/sprite.png';
$spritesheet-sprites: ($account, $check-circle, $delete, );
$spritesheet: (36px, 36px, '../css/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
